name: Release

on:
  push:
    tags:
      - 'v*.*.*'  # Triggers on version tags like v1.0.0, v2.1.3, etc.
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to release (e.g., 1.0.0)'
        required: true
        type: string

jobs:
  create-release:
    runs-on: ubuntu-latest
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}
      version: ${{ steps.get_version.outputs.version }}
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      
    - name: Get version
      id: get_version
      run: |
        if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
          VERSION="v${{ github.event.inputs.version }}"
        else
          VERSION="${{ github.ref_name }}"
        fi
        echo "version=$VERSION" >> $GITHUB_OUTPUT
        
    - name: Create Draft Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ steps.get_version.outputs.version }}
        release_name: OpenWhispr ${{ steps.get_version.outputs.version }}
        draft: true  # Creates as draft - you manually publish when ready
        prerelease: false
        body: |
          ## What's New
          - 
          
          ## Bug Fixes
          - 
          
          ## Downloads
          Download the appropriate version for your platform below.
          
          ### Installation Instructions
          
          **macOS**: Download the .dmg file, open it, and drag OpenWhispr to Applications
          **Windows**: Download and run the .exe installer
          **Linux**: Download the .AppImage and make it executable
          
          ---
          *Note: macOS builds are signed and notarized by Apple*

  build-and-release:
    needs: create-release
    runs-on: ${{ matrix.os }}
    
    strategy:
      matrix:
        os: [macos-latest, ubuntu-latest, windows-latest]
        include:
          - os: macos-latest
            build_cmd: npm run build:mac
          - os: ubuntu-latest
            build_cmd: npm run build:linux
          - os: windows-latest
            build_cmd: npm run build:win
        
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    # macOS code signing setup (same as build workflow)
    - name: Setup macOS Code Signing
      if: matrix.os == 'macos-latest'
      env:
        APPLE_CERTIFICATE_BASE64: ${{ secrets.APPLE_CERTIFICATE_BASE64 }}
        APPLE_CERTIFICATE_PASSWORD: ${{ secrets.APPLE_CERTIFICATE_PASSWORD }}
        APPLE_API_KEY_BASE64: ${{ secrets.APPLE_API_KEY_BASE64 }}
      run: |
        # Create temp directory for certificates
        CERTIFICATE_PATH=$RUNNER_TEMP/build_certificate.p12
        API_KEY_PATH=$RUNNER_TEMP/api_key.p8
        KEYCHAIN_PATH=$RUNNER_TEMP/app-signing.keychain-db
        
        # Decode certificates from secrets
        echo "$APPLE_CERTIFICATE_BASE64" | base64 --decode > $CERTIFICATE_PATH
        echo "$APPLE_API_KEY_BASE64" | base64 --decode > $API_KEY_PATH
        
        # Create temporary keychain
        security create-keychain -p "runner" $KEYCHAIN_PATH
        security set-keychain-settings -lut 21600 $KEYCHAIN_PATH
        security unlock-keychain -p "runner" $KEYCHAIN_PATH
        
        # Import certificate to keychain
        security import $CERTIFICATE_PATH -P "$APPLE_CERTIFICATE_PASSWORD" -A -t cert -f pkcs12 -k $KEYCHAIN_PATH
        security list-keychain -d user -s $KEYCHAIN_PATH
        
        # Allow codesign to use the certificate
        security set-key-partition-list -S apple-tool:,apple: -s -k "runner" $KEYCHAIN_PATH
        
        # Export paths for electron-builder
        echo "APPLE_API_KEY=$API_KEY_PATH" >> $GITHUB_ENV
        echo "CSC_LINK=$CERTIFICATE_PATH" >> $GITHUB_ENV
        
    - name: Update package.json version
      run: |
        VERSION="${{ needs.create-release.outputs.version }}"
        VERSION="${VERSION#v}"  # Remove 'v' prefix
        npm version $VERSION --no-git-tag-version
        
    - name: Build Application
      run: ${{ matrix.build_cmd }} -- --publish always
      env:
        GH_TOKEN: ${{ secrets.GH_TOKEN }}
        # Certificate password for signing
        CSC_KEY_PASSWORD: ${{ secrets.APPLE_CERTIFICATE_PASSWORD }}
        # Notarization credentials (electron-builder standard)
        # APPLE_API_KEY is set from the file path in setup step
        APPLE_API_KEY_ID: ${{ secrets.APPLE_API_KEY_ID }}
        APPLE_API_ISSUER: ${{ secrets.APPLE_API_ISSUER }}
        APPLE_TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}
        
      
    # Security cleanup
    - name: Cleanup Certificates
      if: always() && matrix.os == 'macos-latest'
      run: |
        security delete-keychain $RUNNER_TEMP/app-signing.keychain-db || true
        rm -f $RUNNER_TEMP/build_certificate.p12
        rm -f $RUNNER_TEMP/api_key.p8